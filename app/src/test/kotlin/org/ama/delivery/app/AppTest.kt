/*
 * This source file was generated by the Gradle 'init' task
 */
package org.ama.delivery.app

import io.kotest.core.annotation.Ignored
import io.kotest.core.spec.style.BehaviorSpec
import io.kotest.core.spec.style.DescribeSpec
import io.kotest.core.spec.style.FunSpec
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.equals.shouldBeEqual
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe
import io.kotest.matchers.string.shouldContain
import io.kotest.matchers.string.shouldEndWith
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test

class AppTest {
    // @Test
    fun appHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }
}

@Ignored("Dummy test to check Kotest framework")
class AppTestFunSpec : FunSpec({
    val app = App()

    context("greeting") {
        test("app should have a greeting") {
            app.greeting shouldNotBe null
        }

        test("greeting should contain 'Hello'") {
            app.greeting shouldContain "Hello"
        }

        test("greeting should be exclamation") {
            app.greeting shouldEndWith "!"
        }
    }

    context("addressee") {
        test("app should address the whole World") {
            app.greeting shouldContain "World"
        }
    }
})

@Ignored("Dummy test to check Kotest framework")
class AppTestStringSpec : StringSpec({
    val app = App()
    "app greeting should be 'Hello World!" {
        app.greeting shouldBeEqual "Hello World!"
    }
})

@Ignored("Dummy test to check Kotest framework")
class AppTestDescribeSpec : DescribeSpec({
    describe("app greeting") {
        val greeting = App().greeting
        it("should have length of 12") {
            greeting.length shouldBe 12
        }
        it("should be 'Hello World!") {
            greeting shouldBe "Hello World!"
        }
    }
})

@Ignored("Dummy test to check Kotest framework")
class AppTestBehaviorSpec : BehaviorSpec({
    context("app should greet the world") {
        given("an app object") {
            val app = App()
            and("my name") {
                val name = "Mikhail"
                When("called for greeting") {
                    val greeting = app.greeting
                    then("it should provide a greeting") {
                        greeting shouldNotBe null
                    }
                    then("the greeting should be 'Hello World!'") {
                        greeting shouldBe "Hello World!"
                    }
                    then("my personal greeting should be built"){
                        greeting.replace("World", name) shouldBe "Hello Mikhail!"
                    }
                }
            }
        }
    }
})